
1. Your design probably has a type called something like Car or Vehicle that is a supertype to both Volvo and Scania.
   What is the contract for gas() and brake() in this type? Do the implementations of gas() and brake() in both Volvo and Scania follow this contract?
   Does your design follow the Liskov Substitution Principle?


Our design contains both a Car interface and a Vehicle superclass. The contract for gas inside vehicle class is that the method is given a double
between 0 and 1 and in return increases the speed of the vehicle as long as it doesn’t go above the max possible speed. The contract for brake is
that the method is given a double between 0 and 1 and in return decreases the speed of the vehicle as long as it doesn’t go below 0.
The implementation of gas() and brake() inside Volvo follows the exact same contract. However inside Scania the contract for gas() follows a different
contract as it asks for a double between 0 and 1. And that the platform is raised and only then does it increase the speed of the vehicle.
Because of this, the implementation of gas in Scania breaks the Liskov Substitution Principle because the code doesn't satisfy clients' methods.
The reason behind this is that the Scania gas() method will check whether its platform is raised or not and the gas() method depends on this condition.


2. How did you handle duplicated code between Scania, the car transporters and the repair shops? 
   Explain how you decided when to use subclassing and when to use composition and delegation.


Both the Scania and the car transporter are vehicles so they both extend our superclass ‘Vehicle’ while also overriding the method for gas,
as both Scania and the car transporter have special conditions for when the gas function is allowed to increment the speed of the vehicle. 


The commonalities amongst the car transporter and the repairshop is the ability to load and store vehicles that implement the car interface.
This shared property is gained through implementation of a common ‘HasCarLoader’ interface, as well as composition through a CarLoader component.
The methodics throughout CarLoaders implementation is the same in both Scania and the car transporter, except for the implementation of CarLoaders load,
as for car transporter, it can only load cars when its platform is lowered.


3. Did you need to modify the design from lab 1 in order to make these extensions? If so, how could you have noticed that your design from Lab 1 did
   not follow the Open-Closed Principle before you started working on Lab 2?


Firstly, we renamed our class ‘Car’ to ‘Vehicle’, the reason for this was because we wanted to be able to create subclasses that were not just “Cars”
but other types of vehicles like trucks. But at the same time not confuse the reader by having the superclass named car.
The other change we made was to create the two classes TurboEngine and TrimEngine. The reason for this change was to allow for further extensibility
by allowing new vehicles to be created that feature these engines and thus avoiding code duplication and redundant code.
We also added the Car interface to the two car classes (Volvo240 och Saab95), in order to get the categorization we need in order to only make the
CarLoader susceptible to be used upon vehicles that implement cars. In Lab 1 we did not have a general class for the commonalities between different
types of vehicles, which would prove useful in the second lab as introducing trucks with many sharing attributes of cars, without the ‘Vehicle’ class
would surely create much duplicated code. Another aspect of our older code for Lab 1 that would need changes was our implementation of the different ways the cars get their speedfactor.
The Saab95 had its turbo attribute, and the Volvo had its trimfactor, but with the way we implemented it, the two speed enhancing properties were bound to their respective sort of car. In our newer version of the code, we created TurboEngine and TrimEngine, separating these from their respective car-models in newer component classes meant for composition, also enabling us to in the future being able to easier create new car-models and vehicles with either TurboEngine and/ or TrimEngine.
